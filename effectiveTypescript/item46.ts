//타입 선언과 관련된 세 가지 버전 이해하기

//타입 스크립트를 사용하려면 세 가지 사항을 추가로 고려해야 한다.
//1. 라이브러리 버전
//2. 타입 선언(@types)의 버전
//3. 타입스크립트의 버전
//세 가지 버전 중 하나라도 맞지 않으면, 의존성과 상관없어 보이는 곳에서 엉뚱한 오류가 발생할 수 있다.
//타입스크립트에서 일반적으로 의존성을 사용하는 방식은 다음과 같다.
//특정 라이브러리를 dependencies로 설치하고, 타입 정보는 devDependencies로 설치한다.
//npm install react
//+ react@16.8.6
//npm install --save-dev @types/react
//+ @types/react@16.8.19
//메이저 버전과 마이너 버전(16.8)이 일치하지만 패치 버전(.6, .19)은 일치 하지 않는다는 점을 주목해야 한다.
//@types/react의 16.8.19는 타입 선언들이 리액트 16.8 버전의 API를 나타낸다는 것을 의미한다.
//만약 리액트 모듈이 시맨틱(sementic) 버전 규칙을 제대로 지킨다고 가정하면 패치 버전들(16.8.1, 16.8.2, ...)은 공개 API의 사양을 변경하지 않습니다.
//따라서 타입 선언을 업데이트할 필요는 없다. 하지만 타입 선언 자체에도 버그나 누락이 존재할 수 있고 @types 모듈의 패치 버전은 버그나 누락으로 인한 수정과 추가에 따른 것이다.
//그러나 실제 라이브러리와 타입 정보의 버전이 별도로 관리되는 방식은 네 가지 문제점이 있다.

//1. 라이브러리를 업데이트했지만 실수롤 타입 선언은 업데이트하지 않는 경우
//라이브러리 업데이트와 관련된 새로운 기능을 사용하려 할 때 마다 타입 오류가 발생하게 된다. 코드가 타입 체커를 통과하더라도 런타임에 오류가 발생할 수 있다.
//일반적인 해결책은 타입 선언도 업데이트하여 라이브러리와 버전을 맞추는 것이다.
//타입 버전이 아직 준비되지 않은 경우라면 두 가지 선택지가 있다. 보강 기법을 활용하여, 사용하려는 새 함수와 메서드의 타입 정보를 프로젝트 자체에 추가한다. 또는 타입 선언의 업데이트를 직접 작성하고 커뮤니티에 기여할 수 있다.

//2. 라이브러리보다 타입 선언의 버전이 최신인 경우
//첫 번째 문제와 상황이 비슷하지만 대소 관계가 반대이다.
//타입 체커는 최신 API를 기준으로 코드를 검사하게 되지만 런타임에 실제로 쓰이는 것은 과거 버전이다.
//해결책은 라이브러리 버전을 올리거나 타입 선언의 버전을 내리는 것이다.

//3. 프로젝트에서 사용하는 타입스크립트 버전보다 라이브러리에서 필요로 하는 타입스크립트 버전이 최신인 경우
//리액트, 로대시 같은 자바스크립트 라이브러리는 타입 정보를 정확히 표현하기 위해 타입 시스템이 개선되고 버전이 올라간다. 따라서 최신 타입스크립트를 사용해야 한다.
//현재 프로젝트보다 라이브러리에게 필요한 타입스크립트 버전이 높은 상황이라면, @types 선언 자체에서 타입 오류가 발생하게 된다.
//이 오류를 해결하려면 프로젝트의 타입스크립트 버전을 올리거나, 라이브러리 타입 선언의 버전을 원래대로 내리거나, declare module 선언으로 라이브러리의 타입 정보를 없애 버리면 된다.
//타입 스크립트의 특정 버전에 대한 타입 정보를 설치하려면 다음처럼 실행한다.
//$ npm install --save-dev @types/lodash@ts3.1
//라이브러리와 타입 선언의 버전을 일치시키는 것이 최선이겠지만, 상황에 따라 해당 버전의 타입 정보가 없을 수도 있다. 하지만 유명한 라이브러리일수록 버전별로 타입 선언이 존재할 가능성이 높다.

//4. @types의 의존성이 중복될 수 있다.
//@types/foo와 @types/bar에 의존하는 경우를 가정해보자.
//만약 @types/bar가 현재 프로젝트와 호환되지 않는 버전의 @types/foo에 의존한다면 npm은 중첩된 폴더에 별도로 해당 버전을 설치하여 문제를 해결하려고 한다.
//런타임에 사용되는 모듈이라면 괜찮을 수 있지만, 전역 네임스페이스에 있는 타입 선언 모듈이라면 대부분 문제가 발생한다.
//전역 네임스페이스에 타입 선언이 존재하면 중복된 선언, 또는 선언이 병합될 수 없다는 오류로 나타나게 된다.
//이런 상황이라면 npm ls @types/foo를 실행하여 어디서 타입 선언 중복이 발생했는지 추적할 수 있다.
//해결책은 보통 @types/foo를 업데이트하거나 @types/bar를 업데이트해서 서로 버전이 호환되게 하는 것이다.
