//부정확한 타입보다는 미완성 타입을 사용하기

//타입 선언을 작성하다 보면 코드의 동작을 더 구체적으로 또는 덜 구체적으로 모델링하게 된다.
//타입 선언의 정밀도를 높이는 일에는 주의를 기울여야하며 실수가 발생하기 쉽고 잘못된 타입은 차라리 없는 것보다 못할 수 있다.

// 부정확한 타입
interface User {
    name: string;
    age: number;
}

// 위의 예시에서는 User 타입이 name과 age 속성을 가져야 한다고 정의되어 있습니다.
// 그러나 실제로는 User 타입이 더 많은 속성을 가질 수 있으며, 이에 대한 제한이 없습니다.

const user: User = {
    name: 'John',
    age: 30,
    email: 'john@example.com' // 부정확한 타입이므로 추가적인 속성을 가질 수 있음
};

// 미완성 타입
interface User {
    name: string;
    age: number;

    [key: string]: unknown; // 추가적인 속성을 가질 수 있음
}

// 위의 예시에서는 User 타입이 name과 age 속성을 가져야 하지만, 다른 속성도 가질 수 있습니다.
// 이를 통해 나중에 User 타입이 확장되어도 코드의 수정 없이 새로운 속성을 사용할 수 있습니다.

const user2: User = {
    name: 'John',
    age: 30,
    email: 'john@example.com' // 가능하지만 명시적으로 정의되지 않은 속성으로 간주됨
};

//타입 안전성에서 불쾌한 골짜기는 피해야 한다. 없는 것보다 잘못된 게 더 안좋다.
//정확하게 타입을 모델리할 수 없다면 부정확하게 모델리하지 말아야 한다.
//타입 정보를 구체적으로 만들수록 오류 메시지와 자동 완성 기능에 주의를 기울여야 한다.