//타입스크립트 도입 전에 @ts-check와 JSDoc으로 시험해보기

//@ts-check 지시자를 사용하면 타입스크립트 전환시에 어떤 문제가 발생하는지 미리 시험해볼 수 있다.
//매우 느슨한 수준으로 타입체크를 수행하는데 몇 가지 의미 있는 오류들을 찾아낼 수 있다.

//선언되지 않은 전역 변수
//어딘가 숨어있는 변수라면, 변수를 제대로 인식할 수 있게 별도로 타입 선언 파일을 만들어야 합니다.
//types.d.ts 파일 생성. 파일을 찾지 못하면 <reference path="./types.d.ts" /> 명시적으로 import

//알 수 없는 라이브러리
//서드파티 라이브러리를 사용하는 경우, 타입 정보를 알아야 한다.
//서드파티 라이브러리의 타입 선언을 설치하면 사양정보를 참조하게 된다.

//DOM 문제
//@ts-check
const ageEl = /** @type {HTMLInputElement} */ (document.getElementById("age"));
ageEl.value = '12';
//JSDoc의 @type 구문을 사용할 때는 타입을 감싸는 중괄호가 필요하다는 것을 주의해야 한다.

//부정확한 JSDoc
//프로젝트에 이미 JSDoc 스타일의 주석을 사용중이었다면, @ts-check 지시자를 설정하는 순간부터 기존 주석에 타입 체크가 동작하게 되고 갑자기 수많은 오류가 발생하게 된다.
//@ts-check 지시자와 JSDoc 주석을 너무 장기간 사용하는 것은 코드 분량을 늘려서 로직을 해석하는데 방해된다.
//마이그레이션의 궁극적인 목표는 자바스크립트에 JSDoc 주석이 있는 형태가 아니라 모든 코드가 타입 스크립트 기반으로 전환되는 것이다.

//파일 상단에 //@ts-check를 추가하면 자바스크립트에서도 타입 체크를 수행할 수 있다.
//전역 선언과 서드파티 라이브러리의 타입 선언을 추가하는 방법을 익힌다.
//JSDoc 주석을 잘 활용하면 자바스크립트 상태에서도 타입 단언과 타입 추론을 할 수 있다.
//JSDoc 주석은 중간 단계이기 때문에 너무 공들일 필요는 없다. 최종 목표는 .ts로 된 타입스크립트 코드임을 명심한다.