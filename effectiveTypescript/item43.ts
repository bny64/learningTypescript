//몽키 패치보다는 안전한 타입 사용하기

//자바스크립트는 객체와 클래스에 임의의 속성을 추가할 수 있을 만큼 유연하다.
window.monkey = 'Tamarin';

//하지만 일반적으로 임의의 속성을 추가하는 것은 좋은 설계가 아니다.
//위 문제를 해결하기 위해 any 단언문을 사용해야 하지만 타입 안전성을 상실하게 된다.
(window as any).monkey = 'Tamarin';

//해결책 제시
//1. interface의 보강기능을 사용한다.
interface Document {
    monkey: string;
}

document.monkey = 'Tamarin';
//보강을 사용한 방법이 any보다 나은 점은 다음과 같다.
//타입이 더 안전하다.
//속성에 주석을 붙일 수 있다.
//속성에 자동완성을 사용할 수 있다.
//몽키 패치가 어떤 부분에 적용되었는지 기록이 남는다.

//보강을 사용할 때 주의할 점은 모듈 영역과 관련이 있다.
//보강은 전역적으로 적용되기 때문에, 코드의 다른 부분이나 라이브러리로부터 분리할 수 없다.
//어플리케이션이 실행되는 동안 속성을 할당하면 실행 시점에서 보강을 적용할 방법이 없다.
//어떤 엘리먼트에는 속성이 있고 어떤 엘리먼트에는 속성이 없는 경우가 생긴다.

//2. 타입 단언문을 사용
interface MonkeyDocument extends Document {
    monkey: string;
}

(document as MonkeyDocument).monkey = 'Macaque';
//MonkeyDocument는 Document를 확장하기 때문에 타입 단언문은 정상이며 할당문의 타입은 안전하다.
//하지만 몽키 패치를 남용해서는 안되고 궁극적으로 더 잘 설계된 구조로 리팩토링하는 것이 좋다.

//전역 변수나 DOM에 데이터를 저장하지 말고, 데이터를 분리해서 사용해야 한다.
//내장 타입에 데이터를 저장하는 경우, 안전한 타입 접근법 중 하나(보강이나 사용자 정의 인터페이스로 단언)을 사용해야 한다.
//보강의 모듈 영역 문제를 이해해야 한다.