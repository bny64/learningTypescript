//소스맵을 사용하여 디버깅하기

//디버깅 문제를 해결하기 위해 브라우저 제조사들은 서로 협력하여 소스맵이라는 해결책을 내놓았다.
//코드가 복잡하게 변환된다면 소스맵이 필요하다.
//타입스크립트가 소스맵을 생성할 수 있도록 tsconfig.json에서 sourceMap 옵션을 설정해보자.
// {
//     "compileOptions": {
//         "sourceMap": true
//     }
// }
//이제 컴파일을 실행하면 각 .ts 파일에 대해서 .js와 .js.map 두 개의 파일이 생성한다.
//소스맵이 .js파일과 같이 있으면, 브라우저 디버거에서 새로운 index.ts 파일이 나타난다.
//브레이크 포인트를 설정할 수 있고 변수를 조사할 수 있다.
//소스맵이 있으면 디버거에서 생성된 자바스크립트 대신 원본 타입스크립트 소스를 사용 할 수 있다.

//디버거 좌측의 파일 목록에서 index.ts가 기울임 글꼴로 나오는데 이는 웹 페이지에 포함된 실제파일이 아니라는 뜻이다.
//실제로 소스맵을 통해 타입스크립트처럼 보이는 것 뿐이다.

//타입스크립트와 함께 번들러나 압축기를 사용하고 있다면, 번들러나 압축기가 각자의 소스맵을 생성하게 된다.
//이상적인 디버깅 환경이 되려면 생성된 자바스크립트가 아닌 원본 타입스크립트 소스로 매핑 되도록 해야 한다.
//번들러가 기본적으로 타입스크립트를 지원한다면 별도 설정없이 잘 동작해야하고 그렇지 않다면 번들러가 소스맵을 인식할 수 있도록 추가적인 설정이 필요하다.

//상용환경에 소스맵이 유출되고 있는지 확인해야 한다.
//디버거를 열지 않는 이상 소스맵이 로드되지 않으므로, 사용자에게 성능 저하는 발생하지 않는다.

//NodeJS 프로그램의 디버깅에도 소스맵을 사용할 수 있다.
//보통 편집기가 자동 인식하거나 NodeJS 프로세스를 브라우저 디버거와 연결하면 된다.

//원본 코드가 아닌 변환된 자바스크립트 코드를 디버깅하지 말자. 소스맵을 사용해서 런타임에 타입스크립트 코드를 디버깅합시다.
//소스맵이 최종적으로 변환된 코드에 완전히 매핑되었는지 확인한다.
//소스맵에 원본 코드가 그대로 포함되도록 설정되어 있을 수도 있으니 공개되지 않도록 설정 확인한다.